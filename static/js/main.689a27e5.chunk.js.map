{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","id","alt","name","email","CardList","robots","map","robot","key","username","Scroll","style","overflow","border","height","children","SearchBox","Searchfield","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","e","searchField","target","value","fetch","then","res","json","users","filterRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAACC,GACV,OACI,yBAAKC,UAAU,wDAEX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAI,SAC/D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCEXC,EARE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,oCACGA,EAAOC,KAAI,SAAAC,GAAK,OAAE,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GAAIA,GAAIO,EAAMP,GAAIE,KAAMK,EAAML,KAAMO,SAAUF,EAAME,SAAUN,MAAOI,EAAMJ,aCI1GO,G,MARA,SAACb,GACZ,OACI,yBAAKc,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAC5DjB,EAAMkB,YCKJC,EARG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKpB,UAAU,OACX,2BAAOqB,SAAUD,EAAcpB,UAAU,mCAAmCsB,KAAK,SAASC,YAAY,oBCiBnGC,E,kDAnBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAK9B,MAAMkB,a,GAhBEc,aC+CbC,E,kDAzCd,aAAc,IAAD,8BACZ,gBAaDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAYD,EAAEE,OAAOC,SAbpC,EAAKZ,MAAM,CACVlB,OAAO,GACP4B,YAAY,IAJD,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAQ3B,IAAD,EACqBb,KAAKJ,MAA1BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,YACTQ,EAAapC,EAAOqC,QAAO,SAAAnC,GAChC,OAAOA,EAAML,KAAKyC,cAAcC,SAASX,EAAYU,kBAEtD,OAAQtC,EAAOwC,OAGb,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWoB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,OAPtB,wBAAI3C,UAAU,MAAd,e,GA1Be+B,aCAlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.689a27e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"tc bg-light-green grow  dib br3 pa3 ma2 bw2 shadow-5\">\r\n            {/* <h1>{props.username}</h1> */}\r\n            <img src={`https://robohash.org/${props.id}?size=200x200`} alt=\"foto\"/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <>\r\n          {robots.map(robot=><Card key={robot.id} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:\"scroll\", border:\"5px solid black\", height:\"750px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({Searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input onChange={searchChange} className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport \"./App.css\"\r\nimport Scroll from \"../components/Scroll\"\r\nimport SearchBox from \"../components/SearchBox\"\r\nimport ErrorBoundary from \"../components/ErrorBoundary\"\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:\"\"\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(res=>res.json())\r\n\t\t.then(users=>this.setState({robots:users}))\r\n\t}\r\n\r\n\tonSearchChange=(e)=>{\r\n\t\tthis.setState({searchField:e.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {robots, searchField}=this.state\r\n\t\tconst filterRobots=robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length?\r\n\t\t\t<h1 className=\"tc\">Loading</h1>:\r\n\t\t\t(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className=\"f1\">Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}